plugins {
    id("groovy")
    id("com.github.johnrengelman.shadow") version "7.1.1"
    id("io.micronaut.application") version "3.2.0"
}

version = "0.1"
group = "tech.garymyers.ecommerce"

repositories {
    mavenCentral()
}

dependencies {
    kapt("io.micronaut:micronaut-http-validation")
    kapt("io.micronaut.data:micronaut-data-processor")
    kapt("io.micronaut.security:micronaut-security-annotations")
    implementation("io.micronaut:micronaut-http-client")
    implementation("io.micronaut:micronaut-jackson-databind")
    implementation("io.micronaut:micronaut-runtime")
    implementation("io.micronaut.cache:micronaut-cache-caffeine")
    implementation("io.micronaut.data:micronaut-data-jdbc")
    implementation("io.micronaut.kotlin:micronaut-kotlin-extension-functions")
    implementation("io.micronaut.kotlin:micronaut-kotlin-runtime")
    implementation("io.micronaut.security:micronaut-security")
    implementation("io.micronaut.security:micronaut-security-jwt")
    implementation("io.micronaut.sql:micronaut-jdbc-hikari")
    implementation("jakarta.annotation:jakarta.annotation-api")
    implementation("org.jetbrains.kotlin:kotlin-reflect:${kotlinVersion}")
    implementation("org.jetbrains.kotlin:kotlin-stdlib-jdk8:${kotlinVersion}")
    runtimeOnly("ch.qos.logback:logback-classic")
    runtimeOnly("org.postgresql:postgresql")
    compileOnly("org.graalvm.nativeimage:svm")

    implementation("io.micronaut:micronaut-validation")

    runtimeOnly("com.fasterxml.jackson.module:jackson-module-kotlin")

    implementation("org.jetbrains.kotlinx:kotlinx-coroutines-jdk8:1.6.0")
    implementation("org.jetbrains.kotlinx:kotlinx-coroutines-reactor:1.6.0")
    implementation("org.jetbrains.kotlinx:kotlinx-coroutines-core:1.6.0")
    implementation("org.jetbrains.kotlinx:kotlinx-coroutines-reactive:1.6.0")

    implementation("org.apache.commons:commons-lang3:3.12.0")
    implementation("org.springframework.security:spring-security-crypto:5.6.2")

    testImplementation("io.micronaut.test:micronaut-test-junit5")
    testImplementation("org.codehaus.groovy:groovy-json")
    testImplementation("io.micronaut.flyway:micronaut-flyway")
    testImplementation("com.github.javafaker:javafaker:1.0.2") { exclude group: 'org.yaml' }

    testApi project(path: ":dbmigrator")
}

allOpen {
    annotation("io.micronaut.aop.Around")
    annotation("io.micronaut.security.annotation.Secured")
    annotation("jakarta.inject.Inject")
    annotation("io.micronaut.http.annotation.Controller")
    annotation("javax.transaction.Transactional")
}

application {
    mainClass.set("tech.garymyers.ecommerce.ApplicationKt")
}

graalvmNative.toolchainDetection = false
micronaut {
    runtime("netty")
    testRuntime("spock2")
    processing {
        incremental(true)
        annotations("tech.garymyers.ecommerce.*")
    }
}

// compile the Kotlin code first since we can more easily call suspend functions from Kotlin
compileTestGroovy.dependsOn compileTestKotlin
compileTestGroovy.classpath += files(compileTestKotlin.destinationDir)
testClasses.dependsOn compileTestGroovy
